["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$goog",["^ ","~$DEBUG",["^ "]]],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate"],"~:excludes",["~#set",[]],"~:name","~$re-com.box","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^?","^?","^7","^7"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$html-attr?","^7","~$scroll-style?","^7","~$align-style?","^7","~$justify-style?","^7","~$scroll-options-list","^7","~$css-style?","^7","~$justify-options-list","^7","~$string-or-hiccup?","^7","~$align-options-list","^7"],"~:defs",["^ ","~$align-style",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","~:line",82,"~:column",7,"~:end-line",82,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^U",[["~$attribute","~$align"]]]]],"~:doc","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"^:","~$re-com.box/align-style","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",18,"~:method-params",["^U",[["^W","^X"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^Q",1,"~:variadic?",false,"^P",82,"~:ret-tag","~$cljs.core/IMap","^R",82,"~:max-fixed-arity",2,"~:fn-var",true,"^T",["^U",["^V",["^U",[["^W","^X"]]]]],"^Y","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"~$h-box",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",233,"^Q",7,"^R",233,"^S",12,"^T",["^U",["^V",["^U",[["~$&",["^ ","~:keys",["~$size","~$width","~$height","~$min-width","~$min-height","~$max-width","~$max-height","~$justify","^X","~$align-self","~$margin","~$padding","~$gap","~$children","~$class","~$style","~$attr"],"~:or",["^ ","^19","none","^1@","~:start","^X","~:stretch"],"~:as","~$args"]]]]]],"^Y","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent","~:top-fn",["^ ","^12",true,"~:fixed-arity",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^11",["^U",[null]]]],"^:","~$re-com.box/h-box","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",12,"^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^11",["^U",[null]]],"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^10",null,"^1O",0,"^11",["^U",[null]],"^Q",1,"^12",true,"~:methods",[["^ ","^1O",0,"^12",true,"~:tag",["^9",[null,"~$clj","~$any"]]]],"^P",233,"^13","^1T","^R",233,"^15",0,"^16",true,"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^Y","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent"],"~$border",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",473,"^Q",7,"^R",473,"^S",13,"^T",["^U",["^V",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1B","^1C","^1U","~$l-border","~$r-border","~$t-border","~$b-border","~$radius","~$child","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]]]],"^Y","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)","^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^11",["^U",[null]]]],"^:","~$re-com.box/border","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",13,"^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^11",["^U",[null]]],"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^10",null,"^1O",0,"^11",["^U",[null]],"^Q",1,"^12",true,"^1Q",[["^ ","^1O",0,"^12",true,"^1R","~$cljs.core/IVector"]],"^P",473,"^13","^1T","^R",473,"^15",0,"^16",true,"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^Y","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)"],"~$flex-flow-style",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",60,"^Q",7,"^R",60,"^S",22,"^T",["^U",["^V",["^U",[["~$flex-flow"]]]]],"^Y","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"^:","~$re-com.box/flex-flow-style","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",22,"^[",["^U",[["^23"]]],"^10",null,"^11",["^U",[null,null]],"^Q",1,"^12",false,"^P",60,"^13","^14","^R",60,"^15",1,"^16",true,"^T",["^U",["^V",["^U",[["^23"]]]]],"^Y","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"~$h-box-args-desc",["^ ","^:","~$re-com.box/h-box-args-desc","^O","target/public/cljs-out/dev/re_com/box.cljs","^P",214,"^Q",1,"^R",214,"^S",21,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",214,"^Q",6,"^R",214,"^S",21],"^1R","^21"],"~$scroller",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",407,"^Q",7,"^R",407,"^S",15,"^T",["^U",["^V",["^U",[["~$&",["^ ","^18",["^19","~$scroll","~$h-scroll","~$v-scroll","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","auto"],"^1L","^1M"]]]]]],"^Y","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value","^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","auto"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","auto"],"^1L","^1M"]]]],"^11",["^U",[null]]]],"^:","~$re-com.box/scroller","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",15,"^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","auto"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","auto"],"^1L","^1M"]]]],"^11",["^U",[null]]],"^[",[["^U",[["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","auto"],"^1L","^1M"]]]],"^10",null,"^1O",0,"^11",["^U",[null]],"^Q",1,"^12",true,"^1Q",[["^ ","^1O",0,"^12",true,"^1R","^21"]],"^P",407,"^13","^1T","^R",407,"^15",0,"^16",true,"^T",["^U",[["~$&",["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","auto"],"^1L","^1M"]]]],"^Y","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value"],"~$box",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",352,"^Q",7,"^R",352,"^S",10,"^T",["^U",["^V",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]]]],"^Y","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box","^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^11",["^U",[null]]]],"^:","~$re-com.box/box","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",10,"^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^11",["^U",[null]]],"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^10",null,"^1O",0,"^11",["^U",[null]],"^Q",1,"^12",true,"^1Q",[["^ ","^1O",0,"^12",true,"^1R","^21"]],"^P",352,"^13","^1T","^R",352,"^15",0,"^16",true,"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1[","^1F","^1G","^1H"],"^1I",["^ ","^19","none"],"^1L","^1M"]]]],"^Y","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box"],"~$box-args-desc",["^ ","^:","~$re-com.box/box-args-desc","^O","target/public/cljs-out/dev/re_com/box.cljs","^P",334,"^Q",1,"^R",334,"^S",19,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",334,"^Q",6,"^R",334,"^S",19],"^1R","^21"],"~$debug",["^ ","^:","~$re-com.box/debug","^O","target/public/cljs-out/dev/re_com/box.cljs","^P",6,"^Q",1,"^R",6,"^S",11,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",6,"^Q",6,"^R",6,"^S",11],"^1R","~$boolean"],"~$justify-style",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",66,"^Q",7,"^R",66,"^S",20,"^T",["^U",["^V",["^U",[["^1@"]]]]],"^Y","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"^:","~$re-com.box/justify-style","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",20,"^[",["^U",[["^1@"]]],"^10",null,"^11",["^U",[null,null]],"^Q",1,"^12",false,"^P",66,"^13","^14","^R",66,"^15",1,"^16",true,"^T",["^U",["^V",["^U",[["^1@"]]]]],"^Y","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"~$gap-args-desc",["^ ","^:","~$re-com.box/gap-args-desc","^O","target/public/cljs-out/dev/re_com/box.cljs","^P",157,"^Q",1,"^R",157,"^S",19,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",157,"^Q",6,"^R",157,"^S",19],"^1R","^21"],"~$v-box",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",293,"^Q",7,"^R",293,"^S",12,"^T",["^U",["^V",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]]]],"^Y","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent","^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^11",["^U",[null]]]],"^:","~$re-com.box/v-box","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",12,"^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^11",["^U",[null]]],"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^10",null,"^1O",0,"^11",["^U",[null]],"^Q",1,"^12",true,"^1Q",[["^ ","^1O",0,"^12",true,"^1R",["^9",[null,"^1S","^1T"]]]],"^P",293,"^13","^1T","^R",293,"^15",0,"^16",true,"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I",["^ ","^19","none","^1@","^1J","^X","^1K"],"^1L","^1M"]]]],"^Y","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent"],"~$flex-child-style",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",13,"^Q",7,"^R",13,"^S",23,"^T",["^U",["^V",["^U",[["^19"]]]]],"^Y","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"^:","~$re-com.box/flex-child-style","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",23,"^[",["^U",[["^19"]]],"^10",null,"^11",["^U",[null,null]],"^Q",1,"^12",false,"^P",13,"^13","^14","^R",13,"^15",1,"^16",true,"^T",["^U",["^V",["^U",[["^19"]]]]],"^Y","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"~$line-args-desc",["^ ","^:","~$re-com.box/line-args-desc","^O","target/public/cljs-out/dev/re_com/box.cljs","^P",186,"^Q",1,"^R",186,"^S",20,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",186,"^Q",6,"^R",186,"^S",20],"^1R","^21"],"~$scroller-args-desc",["^ ","^:","~$re-com.box/scroller-args-desc","^O","target/public/cljs-out/dev/re_com/box.cljs","^P",382,"^Q",1,"^R",382,"^S",24,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",382,"^Q",6,"^R",382,"^S",24],"^1R","^21"],"~$line",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",193,"^Q",7,"^R",193,"^S",11,"^T",["^U",["^V",["^U",[["~$&",["^ ","^18",["^19","~$color","^1F","^1G","^1H"],"^1I",["^ ","^19","1px","^2P","lightgray"],"^1L","^1M"]]]]]],"^Y","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line","^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^2P","^1F","^1G","^1H"],"^1I",["^ ","^19","1px","^2P","lightgray"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^2P","^1F","^1G","^1H"],"^1I",["^ ","^19","1px","^2P","lightgray"],"^1L","^1M"]]]],"^11",["^U",[null]]]],"^:","~$re-com.box/line","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",11,"^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^2P","^1F","^1G","^1H"],"^1I",["^ ","^19","1px","^2P","lightgray"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^2P","^1F","^1G","^1H"],"^1I",["^ ","^19","1px","^2P","lightgray"],"^1L","^1M"]]]],"^11",["^U",[null]]],"^[",[["^U",[["^ ","^18",["^19","^2P","^1F","^1G","^1H"],"^1I",["^ ","^19","1px","^2P","lightgray"],"^1L","^1M"]]]],"^10",null,"^1O",0,"^11",["^U",[null]],"^Q",1,"^12",true,"^1Q",[["^ ","^1O",0,"^12",true,"^1R","^21"]],"^P",193,"^13","^1T","^R",193,"^15",0,"^16",true,"^T",["^U",[["~$&",["^ ","^18",["^19","^2P","^1F","^1G","^1H"],"^1I",["^ ","^19","1px","^2P","lightgray"],"^1L","^1M"]]]],"^Y","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line"],"~$scroll-style",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",99,"^Q",7,"^R",99,"^S",19,"^T",["^U",["^V",["^U",[["^W","^28"]]]]],"^Y","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^:","~$re-com.box/scroll-style","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",19,"^[",["^U",[["^W","^28"]]],"^10",null,"^11",["^U",[null,null]],"^Q",1,"^12",false,"^P",99,"^13","^14","^R",99,"^15",2,"^16",true,"^T",["^U",["^V",["^U",[["^W","^28"]]]]],"^Y","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^1D",["^ ","^M",null,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",165,"^Q",7,"^R",165,"^S",10,"^T",["^U",["^V",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1F","^1G","^1H"],"^1L","^1M"]]]]]],"^Y","Returns a component which produces a gap between children in a v-box/h-box along the main axis","^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1F","^1G","^1H"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1F","^1G","^1H"],"^1L","^1M"]]]],"^11",["^U",[null]]]],"^:","~$re-com.box/gap","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",10,"^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1F","^1G","^1H"],"^1L","^1M"]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1F","^1G","^1H"],"^1L","^1M"]]]],"^11",["^U",[null]]],"^[",[["^U",[["^ ","^18",["^19","^1:","^1;","^1F","^1G","^1H"],"^1L","^1M"]]]],"^10",null,"^1O",0,"^11",["^U",[null]],"^Q",1,"^12",true,"^1Q",[["^ ","^1O",0,"^12",true,"^1R","^21"]],"^P",165,"^13","^1T","^R",165,"^15",0,"^16",true,"^T",["^U",[["~$&",["^ ","^18",["^19","^1:","^1;","^1F","^1G","^1H"],"^1L","^1M"]]]],"^Y","Returns a component which produces a gap between children in a v-box/h-box along the main axis"],"~$border-args-desc",["^ ","^:","~$re-com.box/border-args-desc","^O","target/public/cljs-out/dev/re_com/box.cljs","^P",452,"^Q",1,"^R",452,"^S",22,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",452,"^Q",6,"^R",452,"^S",22],"^1R","^21"],"~$v-box-args-desc",["^ ","^:","~$re-com.box/v-box-args-desc","^O","target/public/cljs-out/dev/re_com/box.cljs","^P",274,"^Q",1,"^R",274,"^S",21,"^N",["^ ","^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^P",274,"^Q",6,"^R",274,"^S",21],"^1R","^21"],"~$box-base",["^ ","^M",null,"^N",["^ ","~:private",true,"^O","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/box.cljs","^S",16,"^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","~$bk-color","^1[","~$class-name","^1F","^1G","^1H"]]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^2[","^1[","^30","^1F","^1G","^1H"]]]]],"^11",["^U",[null]]],"^Q",8,"^P",115,"^R",115,"^T",["^U",["^V",["^U",[["~$&",["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^2[","^1[","^30","^1F","^1G","^1H"]]]]]]],"^Y","This should generally NOT be used as it is the basis for the box, scroller and border components"],"^2Z",true,"^:","~$re-com.box/box-base","^O","target/public/cljs-out/dev/re_com/box.cljs","^S",16,"^1N",["^ ","^12",true,"^1O",0,"^15",0,"^[",[["^U",[["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^2[","^1[","^30","^1F","^1G","^1H"]]]]],"^T",["^U",[["~$&",["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^2[","^1[","^30","^1F","^1G","^1H"]]]]],"^11",["^U",[null]]],"^[",[["^U",[["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^2[","^1[","^30","^1F","^1G","^1H"]]]]],"^10",null,"^1O",0,"^11",["^U",[null]],"^Q",1,"^12",true,"^1Q",[["^ ","^1O",0,"^12",true,"^1R","^21"]],"^P",115,"^13","^1T","^R",115,"^15",0,"^16",true,"^T",["^U",[["~$&",["^ ","^18",["^19","^28","^29","^2:","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^X","^1A","^1B","^1C","^1U","^1V","^1W","^1X","^1Y","^1Z","^2[","^1[","^30","^1F","^1G","^1H"]]]]],"^Y","This should generally NOT be used as it is the basis for the box, scroller and border components"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^7","^7"],"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~:description","~:min-width","~:children","~:align-items","~:align","~:bk-color","~:max-height","~:border-right","~:color","~:min-height","~:r-border","~:justify","~:default","~:overflow","^:","~:-webkit-flex-flow","~:background-color","~:h-scroll","~:-webkit-flex","~:-webkit-justify-content","~:width","^1J","~:type","~:flex","~:b-border","~:max-width","~:radius","~:border-left","~:size","~:style","~:div","~:span.bold","~:scroll","~:l-border","~:class","~:padding","~:justify-content","~:gap","~:t-border","~:code","~:overflow-x","~:validate-fn","~:br","~:class-name","~:child","~:align-self","~:border","~:border-top","~:overflow-y","~:border-radius","^1K","~:v-scroll","~:auto","~:required","~:height","~:border-bottom","~:span","~:flex-flow","~:margin","~:attr"]],"~:order",["^3G","^3K","^3D","^4@","^3H","^3X","^44","^45","^46","^4:","^4=","^4A","^4B","^37","^3:","^3;","^3<","^3?","^3@","^3A","^3F","^3I","^3L","^3M","^3N","^3P","^3Q","^3T","^3V","^3U","^3W","^3Z","^43","^3C","^40","^48","^39","^3O","^3=","^47","^4>","^49","^3E","^3R","^:","^4<","^3J","^41","^36","^4?","^3[","^42","^3B","^3>","^38","^3S","^1J","^1K","^3Y","^4;"]],"^Y",null]