["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$goog",["^ ","~$DEBUG",["^ "]]],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate","~$handler-fn","~$re-com.core"],"~:excludes",["~#set",[]],"~:name","~$re-com.input-time","~:imports",null,"~:requires",["^ ","~$reagent","~$reagent.core","^A","^A","^7","^7","~$re-com.text","^B","~$re-com.box","^C","~$re-com.util","^D"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$html-attr?","^7","~$h-box","^C","~$deref-or-value","^D","~$css-style?","^7","~$label","^B","~$number-or-string?","^7","~$pad-zero-number","^D","~$gap","^C"],"~:defs",["^ ","~$text->time",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","~:line",50,"~:column",7,"~:end-line",50,"~:end-column",17,"~:arglists",["~#list",["~$quote",["^Y",[["~$text"]]]]],"~:doc","return as a time int, the contents of 'text'"],"^<","~$re-com.input-time/text->time","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",17,"~:method-params",["^Y",[["^["]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^U",1,"~:variadic?",false,"^T",50,"~:ret-tag","~$number","^V",50,"~:max-fixed-arity",1,"~:fn-var",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]],"^10","return as a time int, the contents of 'text'"],"~$on-defocus",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",116,"^U",8,"^V",116,"^W",18,"~:private",true,"^X",["^Y",["^Z",["^Y",[["~$text-model","~$min","~$max","~$callback","~$previous-val"]]]]],"^10","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"^1;",true,"^<","~$re-com.input-time/on-defocus","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",18,"^12",["^Y",[["^1<","^1=","^1>","^1?","^1@"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",116,"^16",["^;",["~$any","~$clj-nil"]],"^V",116,"^18",5,"^19",true,"^X",["^Y",["^Z",["^Y",[["^1<","^1=","^1>","^1?","^1@"]]]]],"^10","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"~$valid-time?",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",74,"^U",7,"^V",74,"^W",18,"^X",["^Y",["^Z",["^Y",[["~$time"]]]]]],"^<","~$re-com.input-time/valid-time?","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",18,"^12",["^Y",[["^1E"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",74,"^16","~$boolean","^V",74,"^18",1,"^19",true,"^X",["^Y",["^Z",["^Y",[["^1E"]]]]]],"~$input-time-args-desc",["^ ","^<","~$re-com.input-time/input-time-args-desc","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^T",127,"^U",1,"^V",127,"^W",26,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",127,"^U",6,"^V",127,"^W",26],"~:tag","~$cljs.core/IVector"],"~$time->hrs",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",15,"^U",8,"^V",15,"^W",17,"^1;",true,"^X",["^Y",["^Z",["^Y",[["^1E"]]]]]],"^1;",true,"^<","~$re-com.input-time/time->hrs","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",17,"^12",["^Y",[["^1E"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",15,"^16","^17","^V",15,"^18",1,"^19",true,"^X",["^Y",["^Z",["^Y",[["^1E"]]]]]],"~$time->mins",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",10,"^U",8,"^V",10,"^W",18,"^1;",true,"^X",["^Y",["^Z",["^Y",[["^1E"]]]]]],"^1;",true,"^<","~$re-com.input-time/time->mins","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",18,"^12",["^Y",[["^1E"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",10,"^16","^17","^V",10,"^18",1,"^19",true,"^X",["^Y",["^Z",["^Y",[["^1E"]]]]]],"~$triple->time",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",25,"^U",8,"^V",25,"^W",20,"^1;",true,"^X",["^Y",["^Z",["^Y",[[["~$hr","~$_","~$mi"]]]]]],"^10","Return a time integer from a triple int vector of form  [H  _  M]"],"^1;",true,"^<","~$re-com.input-time/triple->time","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",20,"^12",["^Y",[["~$p__20716"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",25,"^16","^17","^V",25,"^18",1,"^19",true,"^X",["^Y",["^Z",["^Y",[[["^1Q","~$_","^1R"]]]]]],"^10","Return a time integer from a triple int vector of form  [H  _  M]"],"~$valid-text?",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",66,"^U",7,"^V",66,"^W",18,"^X",["^Y",["^Z",["^Y",[["^["]]]]],"^10","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"^<","~$re-com.input-time/valid-text?","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",18,"^12",["^Y",[["^["]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",66,"^16","^1G","^V",66,"^18",1,"^19",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]],"^10","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"~$time->text",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",59,"^U",7,"^V",59,"^W",17,"^X",["^Y",["^Z",["^Y",[["^1E"]]]]],"^10","return a string of format HH:MM for 'time'"],"^<","~$re-com.input-time/time->text","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",17,"^12",["^Y",[["^1E"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",59,"^16","~$string","^V",59,"^18",1,"^19",true,"^X",["^Y",["^Z",["^Y",[["^1E"]]]]],"^10","return a string of format HH:MM for 'time'"],"~$triple-seeking-re",["^ ","^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",40,"^U",3,"^V",40,"^W",20,"^1;",true],"^1;",true,"^<","~$re-com.input-time/triple-seeking-re","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",20,"^U",1,"^T",39,"^V",40,"^1J","^1B"],"~$on-new-keypress",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",101,"^U",8,"^V",101,"^W",23,"^1;",true,"^X",["^Y",["^Z",["^Y",[["~$event","^1<"]]]]],"^10","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"^1;",true,"^<","~$re-com.input-time/on-new-keypress","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",23,"^12",["^Y",[["^21","^1<"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",101,"^16",["^;",[null,"^1B","^1C"]],"^V",101,"^18",2,"^19",true,"^X",["^Y",["^Z",["^Y",[["^21","^1<"]]]]],"^10","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"~$to-int",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",19,"^U",8,"^V",19,"^W",14,"^1;",true,"^X",["^Y",["^Z",["^Y",[["~$s"]]]]],"^10","Parse the string 's' to a valid int. On parse failure, return 0"],"^1;",true,"^<","~$re-com.input-time/to-int","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",14,"^12",["^Y",[["~$s"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",19,"^16",["^;",["~$js","^17"]],"^V",19,"^18",1,"^19",true,"^X",["^Y",["^Z",["^Y",[["~$s"]]]]],"^10","Parse the string 's' to a valid int. On parse failure, return 0"],"~$extract-triple-from-text",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",42,"^U",8,"^V",42,"^W",32,"^1;",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]]],"^1;",true,"^<","~$re-com.input-time/extract-triple-from-text","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",32,"^12",["^Y",[["^["]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",42,"^16","~$cljs.core/LazySeq","^V",42,"^18",1,"^19",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]]],"~$validate-arg-times",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",82,"^U",8,"^V",82,"^W",26,"^1;",true,"^X",["^Y",["^Z",["^Y",[["~$model","~$minimum","~$maximum"]]]]]],"^1;",true,"^<","~$re-com.input-time/validate-arg-times","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",26,"^12",["^Y",[["^2:","^2;","^2<"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",82,"^16","^1G","^V",82,"^18",3,"^19",true,"^X",["^Y",["^Z",["^Y",[["^2:","^2;","^2<"]]]]]],"~$force-valid-time",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",90,"^U",8,"^V",90,"^W",24,"^1;",true,"^X",["^Y",["^Z",["^Y",[["^1E","^1=","^1>","~$previous"]]]]],"^10","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"^1;",true,"^<","~$re-com.input-time/force-valid-time","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",24,"^12",["^Y",[["^1E","^1=","^1>","^2?"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",90,"^V",90,"^18",4,"^19",true,"^X",["^Y",["^Z",["^Y",[["^1E","^1=","^1>","^2?"]]]]],"^10","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"~$input-time",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",141,"^U",7,"^V",141,"^W",17,"^X",["^Y",["^Z",["^Y",[["~$&",["^ ","~:keys",["^2:","^2;","^2<"],"~:as","~$args","~:or",["^ ","^2;",0,"^2<",2359]]]]]]],"^10","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above","~:top-fn",["^ ","^15",true,"~:fixed-arity",0,"^18",0,"^12",[["^Y",[["^ ","^2B",["^2:","^2;","^2<"],"^2C","^2D","^2E",["^ ","^2;",0,"^2<",2359]]]]],"^X",["^Y",[["~$&",["^ ","^2B",["^2:","^2;","^2<"],"^2C","^2D","^2E",["^ ","^2;",0,"^2<",2359]]]]],"^14",["^Y",[null]]]],"^<","~$re-com.input-time/input-time","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",17,"^2F",["^ ","^15",true,"^2G",0,"^18",0,"^12",[["^Y",[["^ ","^2B",["^2:","^2;","^2<"],"^2C","^2D","^2E",["^ ","^2;",0,"^2<",2359]]]]],"^X",["^Y",[["~$&",["^ ","^2B",["^2:","^2;","^2<"],"^2C","^2D","^2E",["^ ","^2;",0,"^2<",2359]]]]],"^14",["^Y",[null]]],"^12",[["^Y",[["^ ","^2B",["^2:","^2;","^2<"],"^2C","^2D","^2E",["^ ","^2;",0,"^2<",2359]]]]],"^13",null,"^2G",0,"^14",["^Y",[null]],"^U",1,"^15",true,"~:methods",[["^ ","^2G",0,"^15",true,"^1J","~$function"]],"^T",141,"^16","^1B","^V",141,"^18",0,"^19",true,"^X",["^Y",[["~$&",["^ ","^2B",["^2:","^2;","^2<"],"^2C","^2D","^2E",["^ ","^2;",0,"^2<",2359]]]]],"^10","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above"],"~$lose-focus-if-enter",["^ ","^Q",null,"^R",["^ ","^S","/Users/jb/Documents/PRIVAT/canastapp/gops/target/public/cljs-out/dev/re_com/input_time.cljs","^T",109,"^U",8,"^V",109,"^W",27,"^1;",true,"^X",["^Y",["^Z",["^Y",[["~$ev"]]]]],"^10","When Enter is pressed, force the component to lose focus"],"^1;",true,"^<","~$re-com.input-time/lose-focus-if-enter","^S","target/public/cljs-out/dev/re_com/input_time.cljs","^W",27,"^12",["^Y",[["^2L"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^15",false,"^T",109,"^16",["^;",["^1G","^1C"]],"^V",109,"^18",1,"^19",true,"^X",["^Y",["^Z",["^Y",[["^2L"]]]]],"^10","When Enter is pressed, force the component to lose focus"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^9","^9","^@","^A","^A","^A","^7","^7"],"~:cljs.analyzer/constants",["^ ","~:seen",["^;",["~:description","~:children","~:div.time-icon","~:disabled","~:else","~:i.zmdi.zmdi-hc-fw-rc.zmdi-time","~:default","^<","~:value","~:maximum","~:hide-border?","~:width","~:on-blur","~:type","~:style","~:on-key-up","~:class","~:minimum","~:show-icon?","~:code","~:position","~:validate-fn","~:br","~:input","~:on-change","~:border","~:disabled?","~:required","~:height","~:span","~:margin","~:model","~:attr"]],"~:order",["^2V","^<","^3@","^32","^3:","^2R","^3D","^3=","^2X","^36","^2Z","^3?","^37","^2[","^30","^3A","^35","^33","^3E","^3B","^38","^3;","^3>","^2S","^3<","^2Y","^2U","^31","^34","^2T","^2W","^39","^3C"]],"^10",null]